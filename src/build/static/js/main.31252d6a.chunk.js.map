{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","components/ArticlesList.js","pages/article-content.js","pages/ArticlesListPage.js","components/CommentsList.js","components/UpvotesSection.js","components/AddCommentForm.js","pages/NotFoundPage.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","ArticlesList","articles","map","article","key","className","to","name","title","content","substring","ArticlesListPage","articleContent","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","NotFoundPage","ArticlePage","match","params","find","articleInfo","useEffect","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31252d6a.chunk.js","sourcesContent":["import React from 'react'\n\nconst HomePage = () => (\n    <>\n    <h1>Hello, welcome to my blog!</h1>\n    <p>als;dfja;gha;fjas;fkjas s;lfja;afjas</p>\n    <p>as;ldfgkja;lfb;aklgjalk;fjasfa;sljaf\n        alsdfjal;jg;lajglasjgla;jflkajdflaslkdfj\n\n        a;lsdfjal;sjdf\n\n        asdflja;ldf\n    </p>\n    </>\n\n);\n\nexport default HomePage;\n","import React from 'react'\n\nconst AboutPage = () => (\n    <>\n    <h1>About this Blog!</h1>\n    <p>This is a blog dedicated to things XR, simulation, and programming.</p>\n    <p>This blog is about the freedom to search and try new things and to see if I can \n        find new ways of interacting with the world around me. It's all about the journey. \n        Like Frodo transporting the ring to be destroyed; although, not as dangerous.\n    </p>\n    </>\n\n);\n\nexport default AboutPage;","import React from 'react'\nimport {Link} from 'react-router-dom';\n// Component to create a list of articles to display. \nconst ArticlesList = ( {articles}) => (\n    <>\n    {articles.map((article, key) => (\n        <Link className = \"article-list-item\" key = {key} to={`/article/${article.name}`}>\n            <h3>{article.title}</h3>\n            {/*Below code will pull the first element of array from article and return 150 characters to be displayed.*/}\n            <p>{article.content[0].substring(0,150)}...</p>\n        </Link>\n    ))}\n    </>\n);\n \nexport default ArticlesList;","const articles = [\n    {\n        name: 'AR-resources',\n        title: 'Creating AR apps in Unity: the latest tips and resources',\n        content: [\n            `https://unity3d.com/how-to/create-AR-games-in-Unity-efficiently ad;lfjasd;gha;f as`\n        ]\n    },\n    {\n        name: 'AR-VR-Art',\n        title: 'Creating AR/VR Art',\n        content: [\n            `Being able to create art or to display images of apartments or areas to go to them virtually\n            is an amazing feature of XR technology at the moment. There is also the addition of using AR/VR\n            technology to assist manufacturing plants.`\n        ]\n    },\n];\n\nexport default articles;","import React from 'react'\nimport ArticlesList from '../components/ArticlesList';\nimport articleContent from './article-content';\n\nconst ArticlesListPage = () => (\n    <>\n    <h1>Articles</h1>\n    <ArticlesList articles={articleContent} />\n    </>\n\n);\n\nexport default ArticlesListPage;","import React from 'react';\n\nconst CommentsList = ({ comments}) => (\n    <>\n    <h3>Comments:</h3>\n    {comments.map((comment,key) => (\n        <div className=\"comment\" key={key}>\n            <h4>{comment.username}</h4>\n            <p>{comment.text}</p>\n        </div>\n    ))}\n    </>\n);\nexport default CommentsList;","import React from 'react';\n\nconst UpvotesSection = ({articleName, upvotes, setArticleInfo }) => {\n    const upvoteArticle = async () => {\n        const result = await fetch(`/api/articles/${articleName}/upvote`, {\n            method: 'post',\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n    }\n    return (\n        <div id=\"upvotes-section\">\n        <button onClick={() => upvoteArticle()}>Add Upvote</button>\n        <p>This post has been upvoted {upvotes} times.</p>\n    </div>\n    );\n};\n\nexport default UpvotesSection;","import React, {useState} from 'react';\n\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\n    // creating states for the different text fields they represent.\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n    //creating async function that will update server each time it is pressed.\n    const addComment = async () => {\n        const result = await fetch(`/api/articles/${articleName}/add-comment`, {\n            //Passing the options object as second argument into fetch    \n            //server expecting text variable to set commentText to text\n                method: 'post',//for post request we need a body and text\n                // when passing body we need to make it into a string \n                // so the server can parse it using JSON.stringify\n                body: JSON.stringify({username, text: commentText}),\n                // when sending post requests w/ a JSON body to the server\n                // we need a header to tell our server what data is being sent.\n                headers: {\n                    'Content-Type': 'application/json', // this will allow proper parsing of body sent\n                }\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n        setUsername('');\n        setCommentText('');\n    } \n\n    return (\n    <div id=\"add-comment-form\">\n        <h3>Add a Comment</h3>\n        <label>\n            Name: \n            <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)}/>\n        </label>\n        <label>\n            Comment:\n            <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/>\n        </label>\n        <button onClick={() => addComment()}> Add Comment</button>\n    </div>\n    );\n};\n\nexport default AddCommentForm; ","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: Page Not Found</h1>\n);\n\nexport default NotFoundPage;","import React, {useState, useEffect} from 'react';\nimport ArticlesList from '../components/ArticlesList';\nimport CommentsList from '../components/CommentsList';\nimport UpvotesSection from '../components/UpvotesSection';\nimport AddCommentForm from '../components/AddCommentForm';\nimport articleContent from './article-content';\nimport NotFoundPage from './NotFoundPage';\n\nconst ArticlePage = ({ match }) => {\n    // use fetch (an asynchronous function we can call from the frontend to make requests)\n    //to make sure it works on internet explorer make sure you are in the my-blog folder\n    // npm install --save whatwg-fetch\n    const name = match.params.name;\n    const article = articleContent.find(article => article.name === name);\n    // keeping track of states using react hooks\n    // articleInfo populated by sending request to server\n    // setArticleInfo is a function to change the value of articleInfo\n    // the argument passed to useState is the initial value of articleInfo before\n    // we have loaded any data or changed the state.\n    const [articleInfo, setArticleInfo] = useState({upvotes: 0, comments: []});\n    //set up anonymous function inside of useEffect so that it gets called whenever, our \n    // component is loaded.\n    //useEffect updates not only when the component first mounts, but whenever the component updates \n    // i.e. whenever article info changes it updates.\n    // [] is values useEffect should watch and if one value changes, useEffect should be called again (empty [] = no infinite loop)\n    // we put name within [name] because whenever the url :name changes we want useEffect to be called to \n    //update the component (i.e. article page) with the random upvote number.\n    //useEffect does not allow async like we have been doing so far\n    // we need an async function inside of the function within useEffect\n    useEffect(() => {\n        const fetchData = async () => {\n            //result holds the info as well as the status code for error handling\n            //since the package.json file has \"proxy\": http://localhost:8000 we don't need\n            //to put it before /api/articles/${name} in the fetch ``\n            //reminder you need to restart frontend npm start after changing package.json file\n            const result = await fetch(`/api/articles/${name}`);\n            const body = await result.json();\n            //set article info state with data from server (will contain upvotes and comments data)\n            // console.log(body);\n            setArticleInfo(body);\n        }\n        fetchData();\n        // setArticleInfo({upvotes: Math.ceil(Math.random()*10)});\n    }, [name]);\n    \n    if (!article) return <NotFoundPage />\n    // Line of code below will show other articles but not the current article.\n    const otherArticles = articleContent.filter(article => article.name !== name);\n    return (\n        <>\n        <h1>{article.title}</h1>\n        <UpvotesSection articleName = {name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo} />\n        {article.content.map((paragraph, key) => (\n            <p key={key}>{paragraph}</p>\n        ))}\n        {/* <p>{article.content}</p> */}\n        {/*Below code is for showing other articles besides the one currently on.*/}\n        <CommentsList comments={articleInfo.comments}/>\n        <AddCommentForm articleName = {name} setArticleInfo={setArticleInfo}/> \n        <h3>Other Articles:</h3>\n        <ArticlesList articles={otherArticles}/>\n        </>\n    );\n}\n\nexport default ArticlePage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => (\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n                <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n                <Link to=\"/articles-list\">Articles</Link>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default NavBar;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport './App.css';\n// importing pages of the website.\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport NavBar from './NavBar';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <div id=\"page-body\">\n          {/* Switch makes sure that only 1 of the routes we wrap in it is rendered\n          at a time. This is needed for the NotFoundPage to prevent it from displaying on \n          every page at the bottom, since there is no path specified; hence, it would visualize\n          the NotFoundPage component every page. Switch will make it so only the first route that \n          matches the URL is rendered and none of the others. This is also why the \n          NotFoundPage needs to be tested last or it will be the only thing that renders.*/}\n          <Switch>\n            {/* Route displays whatever component we give it if the path matches.\n            If we do not give it a path it always matches and displays the component. */}\n            <Route path=\"/\" component={HomePage} exact />\n            <Route path=\"/about\" component={AboutPage} />\n            <Route path=\"/articles-list\" component={ArticlesListPage} />\n            <Route path=\"/article/:name\" component={ArticlePage} />\n            {/* We need to give route a path or it will always match be default */}\n            <Route component={NotFoundPage} />\n          </Switch>\n          \n        </div>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';//allows fetch to be supported in internet explorer browser\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}